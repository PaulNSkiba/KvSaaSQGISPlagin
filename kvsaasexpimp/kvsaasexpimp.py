# -*- coding: utf-8 -*-
"""
/***************************************************************************
 KvSaasExpImp
                                 A QGIS plugin
 Information exchange with KvSaaS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Paul Skyba KvSaaS Gmbh
        email                : paul.n.skiba@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QTableWidgetItem, QComboBox, QCheckBox
from qgis.core import QgsProject, QgsMapLayer
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .kvsaasexpimp_dialog import KvSaasExpImpDialog
import os.path
import requests
import webbrowser
import json
import sys, os

ROUTE_SFKINDS = "https://dev.kvsaas.de/api/v2/sfkinds/index" #"http://127.0.0.1:5000/dicts"
ROUTE_SFFIELDS = "http://127.0.0.1:5000/dicts?kind=1&list=all"
ROUTE_UPDATE = "http://127.0.0.1:5000/dicts/update"
ROUTE_REPORT = "http://127.0.0.1:5000/dicts/report"
ROUTE_ORDER = "http://127.0.0.1:5000/dicts/order"
api_key = ""
class KvSaasExpImp:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'KvSaasExpImp_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&KvSaaS / Export Import')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.api_key = ''
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('KvSaasExpImp', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/kvsaasexpimp/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'KvSaaS / Export Import'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&KvSaaS / Export Import'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        layerNames = []
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            #print(os.path.dirname(os.path.abspath(sys.argv[0])))
            #print('getcwd:      ', os.getcwd())
            #print('__file__:    ', __file__)
            f_cfg = open(__file__.replace("kvsaasexpimp.py",".cfg"))
            #cfg = ""
            #with open(__file__.replace("kvsaasexpimp.py",".cfg"), 'r') as j:
            #    cfg = json.loads(j.read())

            cfg = json.load(f_cfg) # json.loads(f_cfg.read())#
            self.api_key = cfg["api_key"]

            #print(api_key)

            self.first_start = False
            self.dlg = KvSaasExpImpDialog()
            #QMessageBox.information(self.dlg, "Message", "Check running")
            # init layer names
            #layerNames = [layer.name() for layer in QgsProject.instance().mapLayers().values()]
            # Connect signal to slot which will update comboBox_2 whenever selection in comboBox changes
            self.dlg.mMapLayerComboBox.layerChanged.connect(self.onLayerChanged)
            self.dlg.cbSFKinds.currentIndexChanged.connect(self.onSFKindChanged)
            self.dlg.twAttrGrid.setColumnWidth(0, 200)
            self.dlg.twAttrGrid.setColumnWidth(1, 200)
            self.dlg.twAttrGrid.setColumnWidth(2, 50)
            self.dlg.btnUpdateFromKvSaaS.clicked.connect(self.onBtnUpdateFromKvSaaSClicked)
            self.dlg.btnCreateOrder.clicked.connect(self.onBtnOrderFromKvSaaSClicked)
            self.dlg.btnOpenReport.clicked.connect(self.onBtnReportFromKvSaaSClicked)

        #self.dlg.comboBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.fill_AttrGridRows()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def onLayerChanged(self):
        pass

    def onSFKindChanged(self):
        print(self.dlg.cbSFKinds.currentIndex())
        pass
    def onBtnOrderFromKvSaaSClicked(self):
        data = ''
        selectedLayer = iface.activeLayer()
        features = selectedLayer.selectedFeatures()
        print(len(features), selectedLayer.selectedFeatureCount())
        for f in features:
            print(str(f['OBJECTID']))
            data+=str(f['OBJECTID'])+'&'

        print(data)
        webbrowser.open(ROUTE_ORDER + '?' + data)

    def onBtnReportFromKvSaaSClicked(self):
        data = ''
        #selectedLayer = self.dlg.mMapLayerComboBox.currentLayer()
        selectedLayer = iface.activeLayer()
        features = selectedLayer.selectedFeatures()
        print(len(features), selectedLayer.selectedFeatureCount())
        for f in features:
            print(str(f['OBJECTID']))
            data+=str(f['OBJECTID'])+'&'

        print(data)
        webbrowser.open(ROUTE_REPORT + '?' + data)
        #response = requests.post(ROUTE_REPORT, data = data) #.json()


    def onBtnUpdateFromKvSaaSClicked(self):
        response = requests.get(ROUTE_UPDATE).json()
        selectedLayer = self.dlg.mMapLayerComboBox.currentLayer()
        field_idx = selectedLayer.fields().indexOf('Zusatz_1')
        if selectedLayer.featureCount() > 0:
            selectedLayer.startEditing()
            for i, feature in enumerate(selectedLayer.getFeatures()):
                if feature['OBJECTID'] == 27171:
                    selectedLayer.changeAttributeValue(feature.id(), field_idx, 'TEST_VALUE') # 'TEST_VALUE'
                    selectedLayer.reload()
                    print('update', str(feature.id() ) + ' ' + str(field_idx))
                    #feature['Zusatz_1'] = 'TEST_VALUE'
                    #QMessageBox.information(self.dlg, "Message", str(feature.id() )+ ' ' + str(field_idx))
                #feature = selectedLayer.getFeatures()[0]
            selectedLayer.commitChanges()
        QMessageBox.information(self.dlg, "Message", "Update")

    def fill_AttrGridRows(self):
        self.dlg.twAttrGrid.clear()
        selectedLayer = self.dlg.mMapLayerComboBox.currentLayer()
        # for feature in layer.getFeatures()
        # selectedLayer.getFeatures()
        if selectedLayer.type() != QgsMapLayer.VectorLayer:
            self.dlg.twAttrGrid.setRowCount(0)
            return
        # Fill combo of kind types
        self.dlg.twAttrGrid.setRowCount(len(selectedLayer.fields()))
        head = {
            'Content-Length': '0',
            'User-Agent': 'Chrome v22.2 Linux Ubuntu',
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Authorization': 'ApiKey {}'.format(self.api_key)
        }
        #print(head)
        #head = {'Authorization': 'ApiKey {}'.format(api_key)}
        response = requests.post(ROUTE_SFKINDS, headers=head)
        #response = requests.post(ROUTE_SFKINDS,  headers={'Authorization': f'ApiKey {api_key}'})
        combo_box_options = []  # response.json() #json.loads(response.json())
        # data_json = response.json() #json.loads(response.text["data"])
        #print(response.status_code)
        if response.status_code == 200:
            #print(response.json()['data'])
            combo_box_options = response.json()['data']
            #print(combo_box_options)
            for t in combo_box_options:
                #combo.addItem(t['name'])
                self.dlg.cbSFKinds.addItem(t["Name"])

        response = requests.get(ROUTE_SFFIELDS)
        combo_box_options = response.json()

        #self.dlg.cbSFKinds.addItem(t['name'])

        for i, field in enumerate(selectedLayer.fields()):
            #self.dlg.twAttrGrid.setItem(i, 0, field.name())
            #self.dlg.twAttrGrid.item(i + 1, 1).setText(field.name())
            item = QTableWidgetItem(field.name())  # create a new Item
            self.dlg.twAttrGrid.setItem(i, 0, item)
            combo = QComboBox()
            # Fill combo of fields
            for t in combo_box_options:
                combo.addItem(t['name'])

            #combo_box_options = ['', 'Дерево','Контейнер', 'Скамейки','Мобильный']
            self.dlg.twAttrGrid.setCellWidget(i, 1, combo)

            check = QCheckBox()
            check.setStyleSheet("margin-left:20px;");
            self.dlg.twAttrGrid.setCellWidget(i, 2, check)

            if (i % 2) == 0:
                #item.setBackground(i, QColor(244,244,244))
                self.dlg.twAttrGrid.item(i, 0).setBackground(QColor(244,244,244))
                #self.dlg.twAttrGrid.item(i, 1).setBackground(QColor(244, 244, 244))
                #self.dlg.twAttrGrid.item(i, 2).setBackground(QColor(244, 244, 244))

            self.dlg.twAttrGrid.setRowHeight(i, 20)

        headers = ["QGIS field", "KvSaaS field", "ID->ID"]
        self.dlg.twAttrGrid.setHorizontalHeaderLabels(headers)

        if selectedLayer.featureCount() > 0:
            feature = 0
            #feature = selectedLayer.getFeatures()[0]

            #self.dlg.twAttrGrid.setRowCount(selectedLayer.featureCount())
        #QMessageBox.information(self.dlg, "Message", selectedLayer.featureCount())

    def fill_cbLayerList(self):
        pass
        #if selectedLayer:
        #    self.dlg.comboBox_2.addItems(
        #        sorted([i for i in selectedLayer.uniqueValues(selectedLayer.fields().lookupField('names'))]))